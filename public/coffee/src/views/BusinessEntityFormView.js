// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var BaseView, BussinessEntityFormView, template, _;
  _ = require('underscore');
  BaseView = require('views/BaseView');
  template = require('text!template/BusinessEntityForm.html');
  return BussinessEntityFormView = (function(_super) {

    __extends(BussinessEntityFormView, _super);

    function BussinessEntityFormView() {
      return BussinessEntityFormView.__super__.constructor.apply(this, arguments);
    }

    BussinessEntityFormView.prototype.id = 'business-entity-modal';

    BussinessEntityFormView.prototype.initialize = function(options) {
      this.$el.modal({
        keyboard: true,
        show: false
      });
      this.tmpl = Handlebars.compile(template);
      return this.$body = null;
    };

    BussinessEntityFormView.prototype.render = function(spec) {
      var group, item, key, value, _ref;
      group = [];
      this.$el.empty();
      if (spec != null ? spec.model : void 0) {
        _ref = spec.model.attributes;
        for (key in _ref) {
          if (!__hasProp.call(_ref, key)) continue;
          value = _ref[key];
          item = {
            id: _.uniqueId('formfield-'),
            label: key,
            type: 'text',
            value: value,
            placeholder: key + '...'
          };
          groups.push(item);
        }
        this.$el.append(this.tmpl({
          groups: groups
        }));
      }
      return this;
    };

    return BussinessEntityFormView;

  })(BaseView);
});
