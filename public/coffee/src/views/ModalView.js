// Generated by CoffeeScript 1.4.0
var $, BaseView, ModalView, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {});

$ = require('jquery');

_ = require('underscore');

BaseView = require('views/BaseView');

ModalView = (function(_super) {

  __extends(ModalView, _super);

  function ModalView() {
    return ModalView.__super__.constructor.apply(this, arguments);
  }

  ModalView.prototype.events = {
    'click #modal-helper-save': '_onSave',
    'click #modal-helper-close': '_onCancel'
  };

  ModalView.prototype.initialize = function(options) {
    _.bindAll(this, '_onHide', '_onSave', '_onCancel');
    this.$el.modal({
      keyboard: true,
      show: false
    });
    this.$el.$body = this.$('.modal-body');
    return this._bindHandlers();
  };

  ModalView.prototype._bindHandlers = function() {
    return this.$el.on('hidden', this._onHide);
  };

  ModalView.prototype._unbindHandlers = function() {
    return this.$el.off('hidden', this._onhide);
  };

  ModalView.prototype.remove = function() {
    this._unbindHandlers();
    return ModalView.__super__.remove.call(this);
  };

  ModalView.prototype.render = function() {
    this.$body.empty();
    this.$body.append(body);
    this.show();
    return this;
  };

  ModalView.prototype.show = function() {
    return this.$el.modal('show');
  };

  ModalView.prototype.hide = function() {
    return this.$el.modal('hide');
  };

  ModalView.prototype.toggle = function() {
    return this.$el.modal('toggle');
  };

  ModalView.prototype._onHide = function() {
    return this.trigger('modal:hode');
  };

  ModalView.prototype._onSave = function(e) {
    return this.trigger('modal:save', {
      ctx: this,
      e: e
    });
  };

  ModalView.prototype._onCancel = function(e) {
    return this.trigger('modal:cancel', {
      ctx: this,
      e: e
    });
  };

  return ModalView;

})(BaseView);
