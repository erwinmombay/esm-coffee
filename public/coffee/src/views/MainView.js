// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var $, Backbone, BusinessEntityCollection, BusinessEntityFormView, BusinessEntityModel, FieldDescriptorCollection, MainView, ModalView, TableView, modalHelperTmpl;
  $ = require('jquery');
  Backbone = require('backbone');
  modalHelperTmpl = require('text!templates/Modal.html');
  TableView = require('views/components/TableView');
  BusinessEntityModel = require('models/BusinessEntityModel');
  BusinessEntityCollection = require('collections/BusinessEntityCollection');
  FieldDescriptorCollection = require('collections/FieldDescriptorCollection');
  ModalView = require('views/ModalView');
  BusinessEntityFormView = require('views/BusinessEntityFormView');
  MainView = (function(_super) {

    __extends(MainView, _super);

    function MainView() {
      return MainView.__super__.constructor.apply(this, arguments);
    }

    MainView.prototype.events = {
      'click #add-entity': '_addEntity',
      'click #fetch-collection': '_fetchCollection',
      'click #reset-collection': '_resetCollection'
    };

    MainView.prototype.initialize = function(options) {
      $('body').append(modalHelperTmpl);
      this.modalView = new ModalView({
        el: $('#modal-helper')
      });
      this.collection = new BusinessEntityCollection();
      this.collection2 = new FieldDescriptorCollection();
      this.fieldset = new BusinessEntityFormView();
      return this._bindHandlers();
    };

    MainView.prototype._bindHandlers = function() {
      this.listenTo(this.modalView, 'modal:save', this._onModalSave);
      return this.listenTo(this.modalView, 'modal:cancel', this._onModalCancel);
    };

    MainView.prototype.render = function() {
      var buttons, tbl;
      buttons = "<button id=\"#add-entity\" type=\"button\" class=\"btn btn-primary\">Add</button>\n<button id=\"#fetch-collection\" type=\"button\" class=\"btn\">Fetch</button>\n<button id=\"#reset-collection\" type=\"button\" class=\"btn\">Reset</button>";
      this.$el.append(buttons);
      tbl = new TableView({
        dataCollection: this.collection,
        headerNames: ['code', 'name', 'address1', 'state/province', 'zip'],
        attrMap: ['code', 'name', 'address1', 'stateOrProvince', 'postalCode']
      });
      this.$el.append(tbl.render().$el);
      return this;
    };

    MainView.prototype._addEntity = function() {
      return this.modalView.render(this.fieldset.render({
        modal: new BusinessEntityModel()
      }).$el);
    };

    MainView.prototype._fetchCollection = function() {
      return this.collection.fetch();
    };

    MainView.prototype._resetCollection = function() {
      return this.collection.reset();
    };

    MainView.prototype._onModalSave = function() {};

    MainView.prototype._onModalCancel = function() {};

    return MainView;

  })(Backbone.View);
  return {
    instance: new MainView({
      el: $('#main-view')
    })
  };
});
